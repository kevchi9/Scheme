;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |PROBLEMA 8|) (read-case-sensitive #t) (teachpacks ((lib "drawings.rkt" "installed-teachpacks") (lib "hanoi.rkt" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "drawings.rkt" "installed-teachpacks") (lib "hanoi.rkt" "installed-teachpacks")) #f)))
(define hanoi-moves ; val: lista di coppie
  (lambda (n) ; n > 0 intero numero di dischi
    (hanoi-rec n 1 2 3)
    ))
(define hanoi-rec ; val: lista di coppie
  (lambda (n s d t) ; n intero, s, d, t: posizioni
    (if (= n 1)
        (list (list s d))
        (let ((m1 (hanoi-rec (- n 1) s t d))
              (m2 (hanoi-rec (- n 1) t d s))
              )
          (append m1 (cons (list s d) m2))
          ))
    ))
(define hanoi-disks1
  (lambda (ls n k t1 t2 t3)
    (if (or (= k 0) (null? ls))
        (list (list 1 t1) (list 2 t2) (list 3 t3))
        (cond ((= (car(car ls)) 1)
              (if (= (cadar ls) 2)
                  (hanoi-disks1 (cdr ls) n (- k 1) (- t1 1) (+ t2 1) t3)
                  (hanoi-disks1 (cdr ls) n (- k 1) (- t1 1) t2 (+ t3 1))
                  ))
              ((= (car(car ls)) 2)
               (if (= (cadar ls) 1)
                   (hanoi-disks1 (cdr ls) n (- k 1) (+ t1 1) (- t2 1) t3)
                   (hanoi-disks1 (cdr ls) n (- k 1) t1 (- t2 1) (+ t3 1))
                   ))
              ((= (car(car ls)) 3)
               (if (= (cadar ls) 1)
                   (hanoi-disks1 (cdr ls) n (- k 1) (+ t1 1) t2 (- t3 1))
                   (hanoi-disks1 (cdr ls) n (- k 1) t1 (+ t2 1) (- t3 1))
                   ))
              ))
    ))
(define hanoi-disks
  (lambda (n k)
    (hanoi-disks1 (hanoi-moves n) n k n 0 0)
    )
  )
(define disk
  (lambda (d n p t)
    (disk-image d n p t)
    )
  )

(define hanoi-pictures1    ;RICORDA DI INVERTIRE IL RISULTATO ALTRIMENTI NON FUNZIONA
  (lambda (ls n k ls1 ls2 ls3)
    (if (= k 0)
        (list ls1 ls2 ls3)
        (cond ((= (car(car ls)) 1)
              (if (= (cadar ls) 2)
                  (hanoi-pictures1 (cdr ls) n (- k 1)
                                (remove  (list-ref ls1 0) ls1)
                                (list* (list-ref ls1 0) ls2)
                                ls3)
                  (hanoi-pictures1 (cdr ls) n (- k 1)
                                (remove  (list-ref ls1 0) ls1)
                                ls2
                                (list* (list-ref ls1 0) ls3))
                  ))
              ((= (car(car ls)) 2)
               (if (= (cadar ls) 1)
                   (hanoi-pictures1 (cdr ls) n (- k 1)
                                 (list* (list-ref ls2 0) ls1)
                                 (remove  (list-ref ls2 0) ls2)
                                 ls3)
                   (hanoi-pictures1 (cdr ls) n (- k 1)
                                 ls1
                                 (remove  (list-ref ls2 0) ls2)
                                 (list* (list-ref ls2 0) ls3)
                   )))
              ((= (car(car ls)) 3)
               (if (= (cadar ls) 1)
                   (hanoi-pictures1 (cdr ls) n (- k 1)
                                 (list* (list-ref ls3 0) ls1)
                                 ls2 (remove  (list-ref ls3 0)
                                              ls3))
                   (hanoi-pictures1 (cdr ls) n (- k 1)
                                 ls1
                                 (list* (list-ref ls3 0) ls2)
                                 (remove  (list-ref ls3 0)
                                          ls3))
                   ))
              ))
    ))
(define hanoi-pictures
 (lambda (n k)
   (hanoi-pictures1 (hanoi-moves n) n k (reverse (list1 n)) null null)) 
 )
(define list1-1
  (lambda (ls k)
    (if (= (length ls) 1)
        (list (string-append "disk" (string (integer->char k))))
        (append (list (string-append "disk" (string (integer->char k))))
                (list1-1  (cdr ls) (+ k 1)))
    )
    )
  )
(define list1
  (lambda (n)
    (list1-1 (n-in-list n) 49)
    ))
(define n-in-list
  (lambda (n)
    (if (= n 1)
        (list n)
    (append (list n) (n-in-list (- n 1)))
    )
    )
  )
(define n-list
  (lambda (n)
  (reverse (n-in-list n)))
  )
(define tower-image
  (lambda (ls n k p t)
    (if (null? ls)
        (towers-background 3)
        (if (= (length ls) 1)
            (disk-image (- (char->integer (string-ref (car ls) 4)) 48) n p t)
            (above (tower-image (cdr ls) n k p (+ t 1)) (disk-image (- (char->integer(string-ref (car ls) 4)) 48) n p t)
                   )
            )
        )
  ))
(define first-tower
  (lambda (n k)
    (tower-image (car (hanoi-pictures n k)) n k 1 0)
    )
  )
(define second-tower
  (lambda (n k)
    (tower-image (car(cdr (hanoi-pictures n k))) n k 2 0)
    )
  )
(define third-tower
  (lambda (n k)
    (tower-image (car(cdr(cdr (hanoi-pictures n k)))) n k 3 0)
    )
  )
(define hanoi-towers
  (lambda (n k)
    (cond ((and (= (car(cdr(car(hanoi-disks n k)))) 0) (= (car(cdr(car(cdr(hanoi-disks n k))))) 0)) ;controllo per prima e seconda torre
           (above (third-tower n k) (towers-background n))
           )
          ((and (= (car(cdr(car(hanoi-disks n k)))) 0) (= (car(cdr(car(cdr(cdr(hanoi-disks n k)))))) 0)) ;controllo per prima e terza
           (above (second-tower n k) (towers-background n))
           )
          ((and (= (car(cdr(car(cdr(hanoi-disks n k))))) 0) (= (car(cdr(car(cdr(cdr(hanoi-disks n k)))))) 0 )) ;controllo per secondo e terzo
           (above (first-tower n k) (towers-background n))
           )
          ((= (car(cdr(car(hanoi-disks n k)))) 0)
           (above (above (second-tower n k) (third-tower n k)) (towers-background n)) ; controllo solo per prima torre
           )
          ((= (car(cdr(car(cdr(hanoi-disks n k))))) 0)
           (above (above (first-tower n k) (third-tower n k)) (towers-background n))
           )
          ((= (car(cdr(car(cdr(cdr(hanoi-disks n k)))))) 0 )
           (above (above (first-tower n k) (second-tower n k)) (towers-background n))
           )
          (else
           (above (above (above (first-tower n k)(second-tower n k)) (third-tower n k))(towers-background n))
           ))
    )
  )